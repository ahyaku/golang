/* Convert [0, 1] table to [0, 255] write result to the file.  */
package main

import(
    "fmt"
    "os"
    "strings"
    "strconv"
)

const OUTPUT_FILE_NAME string = "out.dat"
const OUTPUT_RANGE int = 255

var INPUT string = "0.000000 0.013477 0.026929 0.040333 0.053664 0.066898 0.080011 0.092977 0.105774 0.118377 0.130762 0.142903 0.154778 0.166361 0.177629 0.188557 0.199121 0.209296 0.219059 0.228385 0.237249 0.245629 0.253498 0.260833 0.267611 0.273805 0.279393 0.284349 0.289063 0.292944 0.296800 0.300630 0.304436 0.308217 0.311974 0.315706 0.319415 0.323100 0.326761 0.330400 0.334015 0.337607 0.341177 0.344725 0.348251 0.351755 0.355237 0.358698 0.362138 0.365558 0.368956 0.372335 0.375693 0.379031 0.382350 0.385649 0.388930 0.392191 0.395434 0.398658 0.401864 0.405053 0.408223 0.411376 0.414512 0.417631 0.420733 0.423819 0.426888 0.429942 0.432979 0.436001 0.439008 0.442000 0.444977 0.447940 0.450888 0.453822 0.456742 0.459648 0.462542 0.465422 0.468289 0.471144 0.473986 0.476816 0.479634 0.482440 0.485235 0.488019 0.490792 0.493554 0.496305 0.499047 0.501778 0.504500 0.507212 0.509915 0.512608 0.515293 0.517970 0.520638 0.523298 0.525950 0.528595 0.531232 0.533862 0.536485 0.539102 0.541712 0.544316 0.546914 0.549507 0.552094 0.554676 0.557253 0.559825 0.562393 0.564956 0.567516 0.570072 0.572624 0.575173 0.577719 0.580262 0.582803 0.585341 0.587877 0.590412 0.592945 0.595476 0.598006 0.600536 0.603065 0.605594 0.608122 0.610650 0.613179 0.615709 0.618239 0.620770 0.623303 0.625837 0.628373 0.630911 0.633451 0.635994 0.638539 0.641087 0.643639 0.646194 0.648753 0.651316 0.653883 0.656454 0.659030 0.661611 0.664197 0.666788 0.669386 0.671989 0.674598 0.677213 0.679835 0.682464 0.685100 0.687743 0.690394 0.693052 0.695719 0.698394 0.701077 0.703769 0.706470 0.709180 0.711900 0.714630 0.717369 0.720119 0.722879 0.725650 0.728431 0.731224 0.734028 0.736844 0.739672 0.742512 0.745364 0.748229 0.751106 0.753997 0.756901 0.759819 0.762750 0.765696 0.768655 0.771630 0.774619 0.777623 0.780642 0.783677 0.786727 0.789793 0.792876 0.795975 0.799091 0.800781 0.803942 0.807156 0.810423 0.813742 0.817111 0.820529 0.823996 0.827510 0.831069 0.834674 0.838322 0.842013 0.845746 0.849519 0.853331 0.857182 0.861070 0.864993 0.868952 0.872944 0.876969 0.881025 0.885112 0.889229 0.893373 0.897544 0.901742 0.905964 0.910210 0.914479 0.918769 0.923080 0.927410 0.931758 0.936124 0.940505 0.944901 0.949311 0.953733 0.958167 0.962611 0.967065 0.971527 0.975996 0.980471 0.984950 0.989434 0.993920 1.000000"

func main(){
    var err error

    fmt.Println("Start!!")

    file_out, err := os.Create(OUTPUT_FILE_NAME)
    if err != nil{
        fmt.Println("Error: ", err)
    }

    table_src_str := strings.Split(INPUT, " ")
    table_src := make([]float64, len(table_src_str))
    table_dst := make([]int, len(table_src_str))

    for i, v := range table_src_str {
        table_src[i], err = strconv.ParseFloat(v, 64)
        if err != nil{
            fmt.Println("Error: ", err)
        }
        table_dst[i] = (int)( table_src[i] * (float64)(OUTPUT_RANGE) )
        fmt.Println(table_dst[i])
        file_out.Write( ([]byte)(fmt.Sprint(table_dst[i])) )
        file_out.Write(([]byte)("\n"))
    }

    fmt.Println("End!!")
}
